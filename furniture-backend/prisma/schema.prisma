generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(52)
  posts    Post[]
  products Product[]
}

model Order {
  id         Int                @id @default(autoincrement())
  userId     Int
  code       String             @db.VarChar(15)
  totalPrice Decimal            @db.Decimal(10, 2)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  User       User               @relation(fields: [userId], references: [id])
  products   ProductsOnOrders[]
}

model Otp {
  id            Int      @id @default(autoincrement())
  phone         String   @unique @db.VarChar(15)
  otp           String
  rememberToken String
  verifyToken   String?
  count         Int      @default(0) @db.SmallInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  error         Int      @default(0) @db.SmallInt
}

model Post {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(255)
  content    String
  body       String
  image      String
  authorId   Int
  categoryId Int
  typeId     Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  author     User      @relation(fields: [authorId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
  type       Type      @relation(fields: [typeId], references: [id])
  tags       PostTag[]
}

model Product {
  id          Int                @id @default(autoincrement())
  name        String             @db.VarChar(255)
  description String
  price       Decimal            @db.Decimal(10, 2)
  discount    Decimal            @default(0) @db.Decimal(10, 2)
  rating      Int                @default(0) @db.SmallInt
  inventory   Int                @default(0)
  status      Status             @default(ACTIVE)
  categoryId  Int
  typeId      Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  category    Category           @relation(fields: [categoryId], references: [id])
  type        Type               @relation(fields: [typeId], references: [id])
  orders      ProductsOnOrders[]
  image       image[]
  tags        ProductTag[]
}

model ProductsOnOrders {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @db.SmallInt
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model PostTag {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(52)
  posts Post[]
}

model ProductTag {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(52)
  products Product[]
}

// model Tag {
//   id   Int        @id @default(autoincrement())
//   name String     @db.VarChar(52)
//   tags Taggable[]
// }

// model Taggable {
//   id     Int    @id @default(autoincrement())
//   tagId  Int
//   type   String @db.VarChar(7)
//   typeId Int
//   tag    Tag    @relation(fields: [tagId], references: [id])
// }

model Type {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(52)
  posts    Post[]
  products Product[]
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String?   @db.VarChar(52)
  lastName        String?   @db.VarChar(52)
  phone           String    @unique @db.VarChar(15)
  password        String
  email           String?   @unique @db.VarChar(52)
  role            Role      @default(USER)
  status          Status    @default(ACTIVE)
  lastLogin       DateTime?
  errorLoginCount Int       @default(0) @db.SmallInt
  randToken       String
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  orders          Order[]
  posts           Post[]
}

model image {
  id        Int     @id @default(autoincrement())
  path      String  @db.VarChar(255)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

enum Role {
  USER
  ADMIN
  AUTHOR
}

enum Status {
  ACTIVE
  INACTIVE
  FREEZE
}

model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique @db.VarChar(50)
  value String @db.VarChar(200)
}
